// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package people

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PeopleClient is the client API for People service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeopleClient interface {
	AddPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*WriteResponse, error)
	GetPeople(ctx context.Context, in *Empty, opts ...grpc.CallOption) (People_GetPeopleClient, error)
}

type peopleClient struct {
	cc grpc.ClientConnInterface
}

func NewPeopleClient(cc grpc.ClientConnInterface) PeopleClient {
	return &peopleClient{cc}
}

func (c *peopleClient) AddPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/people.People/AddPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peopleClient) GetPeople(ctx context.Context, in *Empty, opts ...grpc.CallOption) (People_GetPeopleClient, error) {
	stream, err := c.cc.NewStream(ctx, &People_ServiceDesc.Streams[0], "/people.People/GetPeople", opts...)
	if err != nil {
		return nil, err
	}
	x := &peopleGetPeopleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type People_GetPeopleClient interface {
	Recv() (*Person, error)
	grpc.ClientStream
}

type peopleGetPeopleClient struct {
	grpc.ClientStream
}

func (x *peopleGetPeopleClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeopleServer is the server API for People service.
// All implementations must embed UnimplementedPeopleServer
// for forward compatibility
type PeopleServer interface {
	AddPerson(context.Context, *Person) (*WriteResponse, error)
	GetPeople(*Empty, People_GetPeopleServer) error
	mustEmbedUnimplementedPeopleServer()
}

// UnimplementedPeopleServer must be embedded to have forward compatible implementations.
type UnimplementedPeopleServer struct {
}

func (UnimplementedPeopleServer) AddPerson(context.Context, *Person) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPerson not implemented")
}
func (UnimplementedPeopleServer) GetPeople(*Empty, People_GetPeopleServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPeople not implemented")
}
func (UnimplementedPeopleServer) mustEmbedUnimplementedPeopleServer() {}

// UnsafePeopleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeopleServer will
// result in compilation errors.
type UnsafePeopleServer interface {
	mustEmbedUnimplementedPeopleServer()
}

func RegisterPeopleServer(s grpc.ServiceRegistrar, srv PeopleServer) {
	s.RegisterService(&People_ServiceDesc, srv)
}

func _People_AddPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeopleServer).AddPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/people.People/AddPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeopleServer).AddPerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _People_GetPeople_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeopleServer).GetPeople(m, &peopleGetPeopleServer{stream})
}

type People_GetPeopleServer interface {
	Send(*Person) error
	grpc.ServerStream
}

type peopleGetPeopleServer struct {
	grpc.ServerStream
}

func (x *peopleGetPeopleServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

// People_ServiceDesc is the grpc.ServiceDesc for People service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var People_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "people.People",
	HandlerType: (*PeopleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPerson",
			Handler:    _People_AddPerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPeople",
			Handler:       _People_GetPeople_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "people/people.proto",
}
